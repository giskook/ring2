// Code generated by protoc-gen-go.
// source: report_ack.proto
// DO NOT EDIT!

package Carrier

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReportAck struct {
	// imei
	Imei string `protobuf:"bytes,1,opt,name=imei" json:"imei,omitempty"`
	// 上层服务器发给终端的序列号
	Serial string `protobuf:"bytes,2,opt,name=serial" json:"serial,omitempty"`
	// 指令类型
	// PSNDM 下发消息
	// PCROSS 越界告警
	// PLOWPSET 低电设置
	// PCTL 终端控制
	// PSRVSET 服务器设置
	// PREQP 请求定位
	// PTEARCHK 强拆检测
	// PUPGRADE 远程升级
	Cmdtype string `protobuf:"bytes,3,opt,name=cmdtype" json:"cmdtype,omitempty"`
	// 指令执行结果
	// 0 成功
	// 1 失败
	// PTEARCHK 0 正常 1 强拆
	// PUPGRADE 0 正常,开始升级 1 不能升级
	Result string `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
}

func (m *ReportAck) Reset()                    { *m = ReportAck{} }
func (m *ReportAck) String() string            { return proto.CompactTextString(m) }
func (*ReportAck) ProtoMessage()               {}
func (*ReportAck) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

func (m *ReportAck) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *ReportAck) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *ReportAck) GetCmdtype() string {
	if m != nil {
		return m.Cmdtype
	}
	return ""
}

func (m *ReportAck) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*ReportAck)(nil), "Carrier.ReportAck")
}

func init() { proto.RegisterFile("report_ack.proto", fileDescriptor14) }

var fileDescriptor14 = []byte{
	// 118 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x4a, 0x2d, 0xc8,
	0x2f, 0x2a, 0x89, 0x4f, 0x4c, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x77, 0x4e,
	0x2c, 0x2a, 0xca, 0x4c, 0x2d, 0x52, 0xf2, 0xe2, 0xe2, 0x0c, 0x02, 0x4b, 0x3a, 0x26, 0x67, 0x0b,
	0xf1, 0x70, 0xb1, 0x64, 0xe6, 0xa6, 0x66, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x0a, 0xf1, 0x71,
	0xb1, 0x15, 0xa7, 0x16, 0x65, 0x26, 0xe6, 0x48, 0x30, 0x81, 0xf9, 0xfc, 0x5c, 0xec, 0xc9, 0xb9,
	0x29, 0x25, 0x95, 0x05, 0xa9, 0x12, 0xcc, 0x30, 0x05, 0x45, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x12,
	0x2c, 0x20, 0x7e, 0x12, 0x1b, 0xd8, 0x6c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x41, 0xc6,
	0xa4, 0xa0, 0x6f, 0x00, 0x00, 0x00,
}
